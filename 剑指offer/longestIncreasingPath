class Solution {
public:

    int dir[4][2] = { { 1, 0 }, { 0, 1 }, { -1, 0 }, { 0, -1 } };

    int ElemLonsetPath(vector<vector<int> >& matrix, int i, int j, int raw, int col, vector<int>& dp)
    {
        if (dp[i*col + j] > 0)
            return dp[i*col + j];

        int flag = 0;
        for (int k = 0; k < 4; k++){
            int next_x = i + dir[k][0];
            int next_y = j + dir[k][1];

            if (next_x >= 0 && next_x < raw && next_y >= 0 && next_y < col && matrix[i][j] < matrix[next_x][next_y]){
                flag++;
                dp[i*col + j] = max(dp[i*col + j], 1 + ElemLonsetPath(matrix, next_x, next_y, raw, col, dp));	
            }
        }
        if (flag == 0)
            dp[i*col + j] = 1;

        return dp[i*col + j];
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if (matrix.empty())
            return 0;

        int raw = matrix.size();
        int col = matrix[0].size();
        vector<int> dp(raw*col + 1, -1);

        int res = dp[0];

        for (int i = 0; i < raw; i++){
            for (int j = 0; j < col; j++){
                res = max(res, ElemLonsetPath(matrix, i, j, raw, col, dp));
            }
        }
        return res;
    }
};
