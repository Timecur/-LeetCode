/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution {
public:
    vector<vector<int> > Print(TreeNode* pRoot) {
        vector<vector<int> > v;
        if(nullptr == pRoot)
            return v;
        vector<TreeNode*> vNode;
        vector<int> value;
        
        vNode.push_back(pRoot);
        bool flag = true;
        while(!vNode.empty()){
            int size = vNode.size();
            // 正向存储
            for(int i = 0; i < size; i++){
                if(vNode[i]->left)
                        vNode.push_back(vNode[i]->left);
                if(vNode[i]->right)
                        vNode.push_back(vNode[i]->right);
            }
            // 正向打印
            if(flag){
                for(int i = 0; i < size; i++){
                    value.push_back(vNode[i]->val);
                }
                v.push_back(value);
                value.clear();
                flag = false;
            }
            // 逆向打印
            else{
                for(int i = size-1; i >= 0; i--){
                    value.push_back(vNode[i]->val);
                }
                v.push_back(value);
                value.clear();
                flag = true;
            }
            vNode.erase(vNode.begin(), vNode.begin()+size);
        }
        return v;
    }
    
};
