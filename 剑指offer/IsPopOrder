/*
//  确定压入的元素，通过比较pushV的已压入的相邻元素在popV中是否合理
class Solution {
public:
    bool IsPopOrder(vector<int> pushV,vector<int> popV) {
        
        int pos = 0;
        while(pos < popV.size() && pushV[pos] != popV.front()){
            pos++;
        }
        if(pos >= popV.size())
            return false;
        
        while (pos-2 >= 0){
            int posft = 0, posed = 0;
            for(int i = 0; i < pushV.size(); i++){
                if(pushV[pos-1] == popV[i]){
                    posft = i;
                }
                else if(pushV[pos-2] == popV[i]){
                    posed = i;
                }
            }
            if(posft > posed){
                return false;
            }
            pos--;
        }
        return true;
    }
};
*/
/*  通过辅助栈来判断压栈序列是否正确  */
class Solution {
public:
    bool IsPopOrder(vector<int> pushV,vector<int> popV) {
        
        if(0 == pushV.size())
            return false;
        
        int i = 0;
        stack<int> supst;
        
        vector<int>::iterator it = pushV.begin();
        supst.push(*it++);
        
        // 条件：遍历完popV序列
        while(i < popV.size()){
            
            /* 
                判断栈顶元素是否等于序列当前位置的元素
                不等于时：遍历pushV序列并执行压栈操作，直到遇到目标元素 或 遍历完pushV序列
                等于时：  退出栈顶元素，找popV中下一个元素
            */
            if(supst.top() != popV[i]){
                if(it < pushV.end()){
                    supst.push(*it);
                    ++it;
                }
                // 没有找到目标元素，且pushV遍历完，则匹配失败
                else{
                    return false;
                }
            }
            else{
                supst.pop();
                i++;
            }
            
        }
        
        return supst.empty();
    }
};
