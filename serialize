/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string res="";
        if(root == nullptr) {res = "[]"; return res;}
        
        queue<TreeNode*> q;
        q.push(root);
       
        while(!q.empty()){
            TreeNode* t = q.front();             
            q.pop();

            if(t == nullptr){
                res += ",null";
                continue;
            }
            else if(t->val >= 0)
                res += ","+to_string(t->val);
            
            if(t != nullptr){
                q.push(t->left);
                q.push(t->right);
            }
        }
        
        int pos = 0;
        for(int i = res.size()-1; i >= 0; i--){
            if(!isdigit(res[i]))
                continue;
            pos = i;
            break;
        }
        
        res = "[" + res.substr(1, pos+1) + "]";
        
        return res;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        TreeNode* root = nullptr;
        if(data.empty() || data == "[]") return root;
       
        vector<TreeNode*>v;
        string num = "";
        for(int i = 0; i < data.size();){
            if(isdigit(data[i])){
                num += data[i];
                ++i;
            }
            else if(data[i] == 'n'){
                TreeNode* s = nullptr;
                v.push_back(s);
                i += 3;
            }
            else if(data[i] == ',' && !num.empty()){
                TreeNode* s = new TreeNode( atoi(num.c_str()));
                v.push_back(s);
                num = "";
                ++i;
            }
            else{
                ++i;
            }
        }

        int pre = 0;
        for(int i = 0; i < v.size(); i++){
            if(i*2+1 < v.size() && v[i] != nullptr){
               v[i]->left = v[i*2+1];
               ++pre;
            }
            if(i*2+2 < v.size() && v[i] != nullptr){
               v[i]->right = v[i*2+2];
               ++pre;
            }
        }
        return v[0];
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
