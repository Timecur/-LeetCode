/*
3. 给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，
并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。假设网格的四个边均被水包围。

例 1:
11110
11010
11000
00000
Result = 1;
例 2:
11000
11000
00100
00011
Result = 3;
*/

#include <iostream>
#include <vector>

using namespace std;

int raw, col;
int dir[4][2]{{ 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 }};
void DFS(vector<vector<int> > map, int stx, int sty, vector<bool>& res){
	if (stx < 0 || stx >= raw || sty < 0 || sty >= col || map[stx][sty] == 0 || res[stx*col + sty]){
		return;
	}
	if (map[stx][sty] == 1){
		res[stx*col + sty] = true;
	}

	for (int i = 0; i < 4; i++){
		int nx = stx + dir[i][0];
		int ny = sty + dir[i][1];
	
		DFS(map, nx, ny, res);
	}
}

int main()
{

	
	while (cin >> raw >> col){
		vector<vector<int> >map(raw, vector<int>(col));
		for (int i = 0; i < raw; i++){
			for (int j = 0; j < col; j++){
				int num;
				cin >> num;
				map[i][j] = num;
			}
		}
		vector<bool> res(raw*col + 5, false);
		int result = 0;

		for (int i = 0; i < raw; i++){
			for (int j = 0; j < col; j++){
				if (map[i][j] == 1 && !res[i*col + j]){
					result++;
					DFS(map, i, j, res);
				}
			}
		}

		cout << result << endl;
	}



	return 0;
}
