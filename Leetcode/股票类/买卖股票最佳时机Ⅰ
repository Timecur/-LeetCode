class Solution {
public:
    /*
    int maxProfit(vector<int>& prices) {
        if(prices.size() < 2)
            return 0;
        
        vector<int> profit;
        for(int i = 0; i < prices.size()-1; i++){
            profit.push_back(prices[i+1]-prices[i]);
        }
        
        vector<int> dp(profit.size()+1, INT_MIN);
        dp[0] = 0;
        int res = max(profit[0],0); 
            
        for(int i = 1; i <= profit.size(); i++){
            // 如果收益大于0，则可连续向下遍历
            // 否则断开，从当前位置开始向下连续
            dp[i] = max(dp[i-1]+profit[i-1], 0);
            // 记录当前最大
            res = max(dp[i], res);
        }
        return res;
    }
    */
    
    // 优化掉dp数组
    /*
    int maxProfit(vector<int>& prices) {
        if(prices.size() < 2)
            return 0;
        
        vector<int> profit;
        for(int i = 0; i < prices.size()-1; i++){
            profit.push_back(prices[i+1]-prices[i]);
        }
        
        // 记录上一次的利益值
        int pre = 0;
        int res = pre;
        for(int i = 0; i < profit.size(); i++){
            pre = max(pre+profit[i], 0);
            res = max(pre, res);
        }
        
        return res;
    }
    
    */
    
    // 优化掉profit数组
      int maxProfit(vector<int>& prices) {

        int pre = 0, res = pre;
        for(int i = 0; i < (int)prices.size()-1; i++){
            pre = max(pre+prices[i+1]-prices[i], 0);
            res = max(pre, res);
        }
        return res;
      }
    
};class Solution {
public:
    /*
    int maxProfit(vector<int>& prices) {
        if(prices.size() < 2)
            return 0;
        
        vector<int> profit;
        for(int i = 0; i < prices.size()-1; i++){
            profit.push_back(prices[i+1]-prices[i]);
        }
        
        vector<int> dp(profit.size()+1, INT_MIN);
        dp[0] = 0;
        int res = max(profit[0],0); 
            
        for(int i = 1; i <= profit.size(); i++){
            // 如果收益大于0，则可连续向下遍历
            // 否则断开，从当前位置开始向下连续
            dp[i] = max(dp[i-1]+profit[i-1], 0);
            // 记录当前最大
            res = max(dp[i], res);
        }
        return res;
    }
    */
    
    // 优化掉dp数组
    /*
    int maxProfit(vector<int>& prices) {
        if(prices.size() < 2)
            return 0;
        
        vector<int> profit;
        for(int i = 0; i < prices.size()-1; i++){
            profit.push_back(prices[i+1]-prices[i]);
        }
        
        // 记录上一次的利益值
        int pre = 0;
        int res = pre;
        for(int i = 0; i < profit.size(); i++){
            pre = max(pre+profit[i], 0);
            res = max(pre, res);
        }
        
        return res;
    }
    
    */
    
    // 优化掉profit数组
      int maxProfit(vector<int>& prices) {

        int pre = 0, res = pre;
        for(int i = 0; i < (int)prices.size()-1; i++){
            pre = max(pre+prices[i+1]-prices[i], 0);
            res = max(pre, res);
        }
        return res;
      }
    
};
