class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int sz = prices.size();
        int res = 0;
        if(k < sz/2){
            vector<vector<vector<int>>> dp(sz+1,vector<vector<int>>(k+1,vector<int>(3, 0)));
            for(int i = 0; i < sz; ++i){
                for(int j = k; j > 0; --j){
                    for(int t = 2; t > 0; --t){
                        if(i == 0){
                            dp[i][j][0] = 0;
                            dp[i][j][1] = -prices[i];
                        }
                        else{
                            dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1]+prices[i]);
                            dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j-1][0]-prices[i]);
                        }
                        
                    }
                    
                }
            }
            res = dp[sz-1][k][0];
            
        }   
        else{
            res = 0;
            for(int i = 1; i < sz; ++i){
                res += max(prices[i]-prices[i-1], 0);
            }
        }
        return res;        
    }
    
    
    /*
    int maxProfit(int k, vector<int>& prices) {
        if(prices.empty() || k < 1) return 0;
        
        vector<int> profit;
        
        int pre = 0;
        for(int i = 0; i < prices.size()-1; i++){
            int inc = prices[i+1] - prices[i];
            
            if(pre+inc > pre){
            
                pre += inc;
                if(i+1 == prices.size()-1){
                    profit.push_back(pre);
                    pre = 0;   
                }
            }
            else{
                profit.push_back(pre);
                pre = 0;
            }
        }
      
        sort(profit.begin(), profit.end());
        
        long long res = 0;
        for(int i = profit.size()-1; i >= 0 && k > 0; i--, k--){
            res += profit[i]; 
        }
        
        return res;
    }
    */
};
