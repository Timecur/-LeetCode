class Solution {
public:
/*    
    void Adjust(vector<int>& heap, int s, int n){
        int tmp = heap[s];
        for(int i = s*2+1; i < n; i+=2){
            if(i < n-1 && heap[i] > heap[i+1])
                i++;
            else if(heap[s] < heap[i]) continue;
            heap[s] = heap[i];
            s = i;
        }
        heap[s] = tmp;
    }
    
    int findKthLargest(vector<int>& nums, int k) {
        if(nums.size() < k || k == 0) return 0;
        vector<int> heap;
        
        for(int i = 0; i < nums.size(); i++){
            int nf = heap.size()/2-1;
            if(i < k){
                heap.push_back(nums[i]);
                for(int i = nf; i >= 0; i--){
                    Adjust(heap, i, heap.size());
                }                
            }
            else{
                if(nums[i] <= heap[0]) 
                    continue;
                else {
                    heap[0] = nums[i];
                    for(int i = heap.size(); i > 1; i--)
                        Adjust(heap, 0, i);
                }
            }
        }    
        return heap[0];
        
    }
*/    
    int findKthLargest(vector<int>& nums, int k) {

        vector<int> minstack(k);
        for(int i=0;i<k;i++)
        {
            minstack[i]=nums[i];
        }
        make_heap(minstack.begin(),minstack.end(),greater<int>());//创建小根堆
        for(int i=k;i<nums.size();i++)
        {
            if(nums[i]>minstack[0])//若比根节点大则插入
            {
                minstack.push_back(nums[i]);
                push_heap(minstack.begin(),minstack.end(),greater<int>());
            }
            if(minstack.size()>k)
            {
                pop_heap(minstack.begin(),minstack.end(),greater<int>());
                minstack.pop_back();
            }
        }
        return minstack[0];
    }
};

/*
        priority_queue<int,vector<int>,greater<int>> minstack(1,nums[0]);
        for(int i=1;i<nums.size();i++)
        {
            minstack.push(nums[i]);
            if(minstack.size()>k)
                minstack.pop();
        }
        return minstack.top();
    }
*/
