      /**
        快慢指针思想, fast 和 slow 是指针, nums[slow] 表示取指针对应的元素
        注意 nums 数组中的数字都是在 1 到 n 之间的(在数组中进行游走不会越界),
        因为有重复数字的出现, 所以这个游走必然是成环的, 环的入口就是重复的元素, 
        即按照寻找链表环入口的思路来做
      **/

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        if(nums.empty()) return 0;
        
        int fast = 0;
        int slow = 0;
        while(true){
            fast = nums[nums[fast]];
            slow = nums[slow];
            
            // 指向相同元素时，即数组有环路
            if(slow == fast){
                // 查找环路口
                fast = 0;
                while(nums[fast] != nums[slow]){
                    fast = nums[fast];
                    slow = nums[slow];
                }
                return nums[slow];
            }
        }
    }
    /*
    if(nums.empty()) return 0;
        
        set<int> s;
        for(auto &i : nums){
            if(s.count(i)) return i;
            s.insert(i);
        }
        return 0;
    */
};
