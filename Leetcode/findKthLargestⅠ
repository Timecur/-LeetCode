class Solution {
public:  
    void Adjust(vector<int>& heap, int s, int n){
        int tmp = heap[s];
        for(int i = s*2+1; i < n; i+=2){
            if(i < n-1 && heap[i] > heap[i+1])
                i++;
            else if(heap[s] < heap[i]) continue;
            heap[s] = heap[i];
            s = i;
        }
        heap[s] = tmp;
    }
    
    int findKthLargest(vector<int>& nums, int k) {
        if(nums.size() < k || k == 0) return 0;
        vector<int> heap;
        
        for(int i = 0; i < nums.size(); i++){
            int nf = heap.size()/2-1;
            if(i < k){
                heap.push_back(nums[i]);
                for(int i = nf; i >= 0; i--){
                    Adjust(heap, i, heap.size());
                }                
            }
            else{
                if(nums[i] <= heap[0]) 
                    continue;
                else {
                    heap[0] = nums[i];
                    for(int i = heap.size(); i > 1; i--)
                        Adjust(heap, 0, i);
                }
            }
        }    
        return heap[0];   
    }
};
