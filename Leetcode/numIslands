class Solution {
public:
    
    int dir[4][2] {{0,1},{0,-1},{1,0},{-1,0}};
    
    void DFS(vector<vector<char>>& grid, int sx, int sy){
       
        grid[sx][sy] = '#';
        for(int i = 0; i < 4; i++){
            int nx = sx + dir[i][0];
            int ny = sy + dir[i][1];
             
            if(nx >= grid.size() || nx < 0 ||  ny >= grid[0].size() || \
               ny < 0 || grid[nx][ny] != '1')
                continue;
            DFS(grid, nx, ny);
        }
        
    }
    
    int numIslands(vector<vector<char>>& grid) {
        if(grid.empty()) return 0;
        
        int count = 0;
        
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                
                if(grid[i][j] == '1'){
                    ++count;
                    DFS(grid, i, j);
                }
            }
        }
        
        return count;
    }
};
