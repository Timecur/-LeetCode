class Solution {
public:
    int dir[8][2] = {{0,1},{1,0},{0,-1},{-1,0},{1,1},{-1,-1},{1,-1},{-1,1}};
    
    int UpdateState(vector<vector<int>>& board, int stx, int sty){
        int count = 0;
        for(int i = 0; i < 8; i++){
            int nx = stx + dir[i][0];
            int ny = sty + dir[i][1];
            if(nx >= 0 && nx < board.size() && ny >= 0 && ny < board[0].size())
                count += (board[nx][ny] & 1 == 1? 1:0);
        }
        return count;
    }
    
    void gameOfLife(vector<vector<int>>& board) {
        if(board.empty()) return;
        
        int row = board.size();
        int col = board[0].size();
        
        for(int i = 0; i < row; ++i){
            for(int j = 0; j < col; ++j){
                int t = UpdateState(board, i, j);
                if( t == 3)
                    board[i][j] = board[i][j] & 1 == 1? 3:2;
                else if(t > 3 || t < 2)
                    continue;
                else
                    board[i][j] = board[i][j] & 1 == 1? 3:0;
            }
        }
        for(int i = 0; i < row; ++i){
            for(int j = 0; j < col; ++j){
                    board[i][j] >>= 1;
            }
        }
        
    }
};
