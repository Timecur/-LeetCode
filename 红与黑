//// write your code here cpp
//#include <iostream>
//#include <vector>
//#include <algorithm>
//
//using namespace std;
//
//int dir[4][2]{{ 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 }};
//int maxStep = 0;
//
//void DFS(vector<vector<char>> map, vector<vector<int>>& find, int stx, int sty, int& count){
//
//	find[stx][sty] = 1;
//
//	for (int i = 0; i < 4; i++){
//		int nx = stx + dir[i][0];
//		int ny = sty + dir[i][1];
//		if (nx >= 0 && nx < map.size() && ny >= 0 && ny < map[0].size()\
//			&& find[nx][ny] == 0){
//			++count;
//			maxStep = max(count, maxStep);
//			DFS(map, find, nx, ny, count);
//			--count;
//			find[nx][ny] = 0;
//		}
//	}
//}
//
//int main()
//{
//	int m, n;
//	while (cin >> m >> n){
//		vector<vector<char>> map(m, vector<char>(n));
//		vector<vector<int>> find(m, vector<int>(n, 0));
//
//		int stx, sty;
//		for (int i = 0; i < m; i++){
//			for (int j = 0; j < n; j++){
//				cin >> map[i][j];
//				if (map[i][j] == '@'){
//					stx = i;
//					sty = j;
//				}
//				if (map[i][j] == '#')
//					find[i][j] = -1;
//			}
//		}
//		int count = 1;
//
//		DFS(map, find, stx, sty, count);
//		cout << maxStep << endl;
//
//	}
//
//	return 0;
//}

// write your code here cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <stdlib.h>

using namespace std;

int dir[4][2]{{ 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 }};
int maxStep = 0;
int m, n;

struct pos{
	int x;
	int y;
};

void BFS(vector<vector<char>> map, vector<vector<int>>& find, queue<pos>& q){
	if (q.empty())
		return;

	pos p = q.front();
	q.pop();
	for (int i = 0; i < 4; i++){

		pos next;
		next.x = p.x + dir[i][0];
		next.y = p.y + dir[i][1];
		if (next.x >= 0 && next.x < m && next.y >= 0 && next.y < n \
			&& find[next.x][next.y] == 0){
			find[next.x][next.y] = 1;
			maxStep++;
			q.push(next);
		}
	}
	BFS(map, find, q);
}

int main()
{
	while (cin >> m >> n){
		vector<vector<char>> map(m, vector<char>(n));
		vector<vector<int>> find(m, vector<int>(n, 0));
		queue<pos> q;
		pos p;

		for (int i = 0; i < m; i++){
			for (int j = 0; j < n; j++){
				cin >> map[i][j];
				if (map[i][j] == '@'){
					p.x = i;
					p.y = j;
					maxStep += 1;
				}
				if (map[i][j] == '#')
					find[i][j] = -1;
			}
		}
		q.push(p);
		BFS(map, find, q);
		cout << maxStep << endl;
		maxStep = 0;

	}

	return 0;
}
