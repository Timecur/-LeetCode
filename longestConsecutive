class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.empty())
            return 0;
        
        sort(nums.begin(), nums.end());
        vector<int> dp(nums.size()+1);
        
        int max_val = 1;
        dp[0] = 1;
        for(int i = 1; i < nums.size(); i++){
            if(nums[i]-nums[i-1] == 1){
                dp[i] = dp[i-1]+1;
            }
            else if(nums[i] == nums[i-1])
                dp[i] = dp[i-1];
            else
                dp[i] = 1;
            max_val = max(max_val, dp[i]);
        }
        
        return max_val;
    }
};

===========================================================================================================================
更优解：

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.empty())
        {
            return 0;
        }
        unordered_map<int, int> record;
        int max_count = 0;
        for(int i=0; i<nums.size(); i++)
        {
            if(record.find(nums[i]) != record.end())
            {
                continue;
            }
            int left = 0;
            int right = 0;
            if(record.find(nums[i]-1) != record.end())
            {
                left = record[nums[i]-1];
            }
            if(record.find(nums[i]+1) != record.end())
            {
                right = record[nums[i]+1];
            }
            int count = 1+left+right;
            record[nums[i]] = count;
            if(left)
            {
                record[nums[i]-left] = count;
            }
            if(right)
            {
                record[nums[i]+right] = count;
            }
            if(max_count < count)
            {
                max_count = count;
            }
        }
        return max_count;
    }
};
