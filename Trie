https://leetcode-cn.com/explore/interview/card/top-interview-quesitons-in-2018/275/string/1140/


const int Max = 27;

class Trie {
public:
	struct TrieNode{
		int count;
		TrieNode* next[Max];
	};

	/** Initialize your data structure here. */
	Trie() {
		root = new TrieNode();
		root->count = 1;
		for (int i = 0; i < Max; i++){
			root->next[i] = nullptr;
		}
	}

	/** Inserts a word into the trie. */
	void insert(string word) {
		TrieNode* node = root;
		if (!node){
			node = root = new TrieNode();
		}

		for (int i = 0; i < word.size(); i++){
			if (node->next[word[i] - 'a'] == nullptr){
					node->next[word[i] - 'a'] = new TrieNode();
					node->next[word[i] - 'a']->count = 1;
				}
				else{
					node->next[word[i] - 'a']->count++;
				}
				node = node->next[word[i] - 'a'];
			}
			node->next[26] = new TrieNode();
		}

		/** Returns if the word is in the trie. */
		bool search(string word) {
			TrieNode* node = root;
			int i = 0;
			for (i = 0; i < word.size(); i++){
				if (node->next[word[i] - 'a']==nullptr || node->next[word[i] - 'a']->count <= 0)
					return false;
				node = node->next[word[i] - 'a'];
			}

			if (node->next[26] == nullptr)
				return false;
			return true;
		}

		/** Returns if there is any word in the trie that starts with the given prefix. */
		bool startsWith(string prefix) {
			TrieNode* node = root;
			int i = 0;
			for (i = 0; i < prefix.size(); i++){
				if (node->next[prefix[i] - 'a'] == nullptr || node->next[prefix[i] - 'a']->count <= 0)
					return false;
				node = node->next[prefix[i] - 'a'];
			}
			return true;
		}

private:
	TrieNode* root;
};
